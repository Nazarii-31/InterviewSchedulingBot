// <auto-generated />
using System;
using InterviewBot.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterviewSchedulingBot.Migrations
{
    [DbContext(typeof(InterviewBotDbContext))]
    [Migration("20250728182307_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("InterviewBot.Domain.Entities.AvailabilityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId", "Date")
                        .IsUnique();

                    b.ToTable("AvailabilityRecords");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StartTime");

                    b.HasIndex("Status");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.InterviewParticipant", b =>
                {
                    b.Property<Guid>("InterviewId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InterviewId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("InterviewParticipants");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GraphUserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AvailabilityRecordId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityRecordId");

                    b.HasIndex("EndTime");

                    b.HasIndex("StartTime");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.AvailabilityRecord", b =>
                {
                    b.HasOne("InterviewBot.Domain.Entities.Participant", "Participant")
                        .WithMany("AvailabilityRecords")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.InterviewParticipant", b =>
                {
                    b.HasOne("InterviewBot.Domain.Entities.Interview", "Interview")
                        .WithMany("InterviewParticipants")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewBot.Domain.Entities.Participant", "Participant")
                        .WithMany("InterviewParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.TimeSlot", b =>
                {
                    b.HasOne("InterviewBot.Domain.Entities.AvailabilityRecord", "AvailabilityRecord")
                        .WithMany("TimeSlots")
                        .HasForeignKey("AvailabilityRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityRecord");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.AvailabilityRecord", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.Interview", b =>
                {
                    b.Navigation("InterviewParticipants");
                });

            modelBuilder.Entity("InterviewBot.Domain.Entities.Participant", b =>
                {
                    b.Navigation("AvailabilityRecords");

                    b.Navigation("InterviewParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
